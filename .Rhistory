if((hh %% ((M0 - M0%%10)/10)) == 0){
cat(cnt*10, "%,\t", as.character(Sys.time()), "\n", sep="")
cnt <- cnt + 1
}
}
}
start
document()
library(leapgp)
# Generate data
f <- function(x) 1.3356*(1.5*(1-x[1]) + exp(2*x[1] - 1)*sin(3*pi*(x[1] - 0.6)^2) + exp(3*(x[2]-0.5))*sin(4*pi*(x[2] - 0.9)^2))
X <- matrix(runif(2000), ncol=2)
y <- apply(X, 1, f)
# Generate data for prediction
Xtest <- matrix(runif(2000), ncol=2)
ytest <- apply(Xtest, 1, f)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0)
pred[i] <- mod$mean
}
document()
library(leapgp)
# Generate data
f <- function(x) 1.3356*(1.5*(1-x[1]) + exp(2*x[1] - 1)*sin(3*pi*(x[1] - 0.6)^2) + exp(3*(x[2]-0.5))*sin(4*pi*(x[2] - 0.9)^2))
X <- matrix(runif(2000), ncol=2)
y <- apply(X, 1, f)
# Generate data for prediction
Xtest <- matrix(runif(2000), ncol=2)
ytest <- apply(Xtest, 1, f)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0)
pred[i] <- mod$mean
}
document()
library(leapgp)
# Generate data
f <- function(x) 1.3356*(1.5*(1-x[1]) + exp(2*x[1] - 1)*sin(3*pi*(x[1] - 0.6)^2) + exp(3*(x[2]-0.5))*sin(4*pi*(x[2] - 0.9)^2))
X <- matrix(runif(2000), ncol=2)
y <- apply(X, 1, f)
# Generate data for prediction
Xtest <- matrix(runif(2000), ncol=2)
ytest <- apply(Xtest, 1, f)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0)
pred[i] <- mod$mean
}
names(mod)
mod$mean
document()
library(leapgp)
# Make sequential predictions
pred <- rep(NA, 1000)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0)
pred[i] <- mod$mean
}
plot(pred, ytest)
# ============================
#    CASE TWO: M0 = 0
# ============================
# Initalize empty model
mod <- leapGP(X, y, M0 = 0)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0.95)
pred[i] <- mod$mean
}
plot(pred, ytest)
# ============================
#    CASE THREE: Full leapGP
# ============================
# Train leapGP model
mod <- leapGP(X, y, M0 = 30)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0.95)
pred[i] <- mod$mean
}
plot(pred, ytest)
# ============================
#    CASE THREE: Full leapGP
# ============================
# Train leapGP model
mod <- leapGP(X, y, M0 = 30)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0.99)
pred[i] <- mod$mean
}
plot(pred, ytest)
document()
# TEST CHUNK PREDICTION (NOT THE INTENDED USECASE)
mod <- leapGP*(X, y, M0=30)
# TEST CHUNK PREDICTION (NOT THE INTENDED USECASE)
mod <- leapGP(X, y, M0=30)
cor(pred, ytest)
N <- 500
X <- matrix(runif(N * 2), nrow=N, ncol=2)
y <- apply(X, 1, f)
Xtest <- matrix(50 * 2, ncol=2)
ytest <- apply(Xtest, 1, f)
# Train leapGP model
mod <- leapGP(X, y, M0=10)
pred <- rep(NA, 50)
for(i in 1:50){
mod <- predict(mod, Xtest[i,], rho=0.95)
pred[i] <- mod$mean
}
pred <- rep(NA, 50)
for(i in 1:50){
mod <- predict_leapGP(mod, Xtest[i,], rho=0.95)
pred[i] <- mod$mean
}
Xtest <- matrix(50 * 2, ncol=2)
ytest <- apply(Xtest, 1, f)
dim(Xtest)
Xtest <- matrix(runif(50 * 2), ncol=2)
ytest <- apply(Xtest, 1, f)
# Train leapGP model
mod <- leapGP(X, y, M0=10)
pred <- rep(NA, 50)
for(i in 1:50){
mod <- predict_leapGP(mod, Xtest[i,], rho=0.95)
pred[i] <- mod$mean
}
# Test prediction
d1 <- cor(ytest, pred)
d1
# TEST CHUNK PREDICTION (NOT THE INTENDED USECASE)
mod <- leapGP(X, y, M0=30)
f <- function(x) 1.3356*(1.5*(1-x[1]) + exp(2*x[1] - 1)*sin(3*pi*(x[1] - 0.6)^2) + exp(3*(x[2]-0.5))*sin(4*pi*(x[2] - 0.9)^2))
X <- matrix(runif(2000), ncol=2)
y <- apply(X, 1, f)
# Generate data for prediction
Xtest <- matrix(runif(2000), ncol=2)
ytest <- apply(Xtest, 1, f)
mod <- predict_leapGP(mod, Xtest, rho=0.95)
mod$mean
plot(mod$mean, ytestt)
plot(mod$mean, ytest)
# TEST SCALE FEATURE
mod <- leapGP(X, y, M0=30, scale=TRUE)
mod <- predict_leapGP(mod, Xtest, rho=0.95, scale=TRUE)
mod$mean
mod$sd
document()
duqling::twin_galaxies
duqling::lim_polynomial
99/20
18*11/40
duqling::grlee2
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
xx <- seq(0, 1, length.out=51)
expand.grid(xx, xx)
expand.grid(xx, xx)
y <- apply(zz, 1, twin_galaxies)
f1 <- function(x){
x1 <- x[1]
x2 <- x[2]
term1 <- (5/2)*x1 - (35/2)*x2
term2 <- (5/2)*x1*x2 + 19*x2^2
term3 <- -(15/2)*x1^3 - (5/2)*x1*x2^2
term4 <- -(11/2)*x2^4 + (x1^3)*(x2^2)
y <- (9 + term1 + term2 + term3 + term4)*11/20
return(y)
}
f2 <- function(x){
5*exp(-((8*x[1]-2)^2 + (8*x[2] - 2)^2))*(8*x[1] - 2)
}
twin_galaxeis <- function(x) f1(x) + f2(x)
xx <- seq(0, 1, length.out=51)
zz <- expand.grid(xx, xx)
yy <- apply(zz, 1, twin_galaxies)
twin_galaxies <- function(x) f1(x) + f2(x)
xx <- seq(0, 1, length.out=51)
zz <- expand.grid(xx, xx)
yy <- apply(zz, 1, twin_galaxies)
yy
crossprod(xx)
tcrossprod(xx)
yy <- matrix(apply(zz, 1, twin_galaxies), nrow=51)
yy
image(yy)
?image
image(yy, breaks=30)
?RColorBrewer::brewer.pal
?RColorBrewer::brewer.pal(11, "RdBu")
RColorBrewer::brewer.pal(11, "RdBu")
image(yy, breaks=RColorBrewer::brewer.pal(11, "RdBu"))
image(yy, colour=RColorBrewer::brewer.pal(11, "RdBu"))
image(yy, colours=RColorBrewer::brewer.pal(11, "RdBu"))
?image
image(yy, col=RColorBrewer::brewer.pal(11, "RdBu"))
image(yy, col=RColorBrewer::brewer.pal(11, "RdBu"), useRaster=TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RColorBrewer)
f1 <- function(x){
x1 <- x[1]
x2 <- x[2]
term1 <- (5/2)*x1 - (35/2)*x2
term2 <- (5/2)*x1*x2 + 19*x2^2
term3 <- -(15/2)*x1^3 - (5/2)*x1*x2^2
term4 <- -(11/2)*x2^4 + (x1^3)*(x2^2)
y <- (9 + term1 + term2 + term3 + term4)*11/20
return(y)
}
f2 <- function(x){
5*exp(-((8*x[1]-2)^2 + (8*x[2] - 2)^2))*(8*x[1] - 2)
}
twin_galaxies <- function(x) f1(x) + f2(x)
xx <- seq(0, 1, length.out=51)
zz <- expand.grid(xx, xx)
yy <- matrix(apply(zz, 1, twin_galaxies), nrow=51)
image(yy,
col=colorRampPalette(rev(RColorBrewer::brewer.pal(11, "RdBu")))(100))
f1 <- function(x){
x1 <- x[1]
x2 <- x[2]
term1 <- (5/2)*x1 - (35/2)*x2
term2 <- (5/2)*x1*x2 + 19*x2^2
term3 <- -(15/2)*x1^3 - (5/2)*x1*x2^2
term4 <- -(11/2)*x2^4 + (x1^3)*(x2^2)
y <- (9 + term1 + term2 + term3 + term4)*11/20
return(y)
}
f2 <- function(x){
5*exp(-((8*x[1]-2)^2 + (8*x[2] - 2)^2))*(8*x[1] - 2)
}
twin_galaxies <- function(x) f1(x) + f2(x)
xx <- seq(0, 1, length.out=101)
zz <- expand.grid(xx, xx)
yy <- matrix(apply(zz, 1, twin_galaxies), nrow=101)
image(yy,
col=colorRampPalette(rev(RColorBrewer::brewer.pal(11, "RdBu")))(100))
f1 <- function(x){
x1 <- x[1]
x2 <- x[2]
term1 <- (5/2)*x1 - (35/2)*x2
term2 <- (5/2)*x1*x2 + 19*x2^2
term3 <- -(15/2)*x1^3 - (5/2)*x1*x2^2
term4 <- -(11/2)*x2^4 + (x1^3)*(x2^2)
y <- (9 + term1 + term2 + term3 + term4)*11/20
return(y)
}
f2 <- function(x){
5*exp(-((8*x[1]-2)^2 + (8*x[2] - 2)^2))*(8*x[1] - 2)
}
twin_galaxies <- function(x) f1(x) + f2(x)
xx <- seq(0, 1, length.out=51)
zz <- expand.grid(xx, xx)
yy <- matrix(apply(zz, 1, twin_galaxies), nrow=51)
image(yy,
col=colorRampPalette(rev(RColorBrewer::brewer.pal(11, "RdBu")))(100),
useRaster = TRUE)
rm(twin_galaxeis)
?laGP
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(leapgp)
library(RColorBrewer)
library(lhs)
laGP(Xtest[i,], 6, 30, X, y)
library(leapgp)
laGP(Xtest[i,], 6, 30, X, y)
library(laGP)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(leapgp)
library(RColorBrewer)
library(lhs)
library(laGP)
laGP::laGP(Xtest[i,], 6, 30, X, y)
dim(Xtest[1,])
library(tictoc)
for(i in 1:1000){
laGP::laGP(matrix(Xtest[i,], nrow=1), 6, 30, X, y)
}
laGP::laGP(matrix(Xtest[i,], nrow=1), 6, 30, X, y)
X <- lhs::maximinLHS(1000, 2)
y <- apply(X, 1, twin_galaxies)
Xtest <- matrix(runif(2*50), ncol=2)
ytest <- apply(Xtest, 1, twin_galaxies)
library(tictoc)
pred_la[i] <- rep(NA, 50)
library(tictoc)
pred_la <- rep(NA, 50)
for(i in 1:50){
pred_la[i] <- laGP::laGP(matrix(Xtest[i,], nrow=1), 6, 30, X, y)$mean
}
library(leapgp)
version
build_vignettes()
build_vignettes("leapgp")
devtools::build_vignettes()
document()
document()
build_vignettes()
build_vignettes()
library(devtools)
build_vignettes()
library(leapgp)
browseVignettes()
browseVignettes("leapgp")
leapgp::leapGP
?leapgp::leapGP
library(leapgp)
# Generate data
f <- function(x) 1.3356*(1.5*(1-x[1]) + exp(2*x[1] - 1)*sin(3*pi*(x[1] - 0.6)^2) + exp(3*(x[2]-0.5))*sin(4*pi*(x[2] - 0.9)^2))
X <- matrix(runif(2000), ncol=2)
y <- apply(X, 1, f)
# Generate data for prediction
Xtest <- matrix(runif(2000), ncol=2)
ytest <- apply(Xtest, 1, f)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0)
pred[i] <- mod$mean
}
class(mod)
class(mod)
# ============================
#    CASE THREE: Full leapGP
# ============================
# Train leapGP model
mod <- leapGP(X, y, M0 = 30)
class(mod)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0.99)
pred[i] <- mod$mean
}
class(mod)
# ============================
#    CASE THREE: Full leapGP
# ============================
# Train leapGP model
mod <- leapGP(X, y, M0 = 30)
foo = predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0.99)
class(foo)
names(foo)
names(mod)
foo$mean
pred
pred[1]
foo$mean
mod <- leapGP(X, y, M0 = 30)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:100){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0.99)
pred[i] <- mod$mean
}
mod$mean[1:100]
class(mod)
devtools::document()
?leapgp
devtools::document()
# ============================
#    CASE THREE: Full leapGP
# ============================
# Train leapGP model
mod <- leapGP(X, y, M0 = 30)
class(mod)
devtools::document()
?leapGP
devtools::document()
?leapGP
?duqling::borehole
devtools::document()
?leapGP
?predict_leapGP
devtools::document()
library(leapgp)
library(leapgp)
# Generate data
f <- function(x) 1.3356*(1.5*(1-x[1]) + exp(2*x[1] - 1)*sin(3*pi*(x[1] - 0.6)^2) + exp(3*(x[2]-0.5))*sin(4*pi*(x[2] - 0.9)^2))
X <- matrix(runif(2000), ncol=2)
y <- apply(X, 1, f)
# Train leapGP model
mod <- leapGP(X, y, M0 = 30)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0.99)
pred[i] <- mod$mean
}
Xtest <- matrix(runif(2000), ncol=2)
ytest <- apply(Xtest, 1, f)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0.99)
pred[i] <- mod$mean
}
i
class(mod)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(leapgp)
library(RColorBrewer)
library(lhs)
library(laGP)
library(tictoc)
f1 <- function(x){
x1 <- x[1]
x2 <- x[2]
term1 <- (5/2)*x1 - (35/2)*x2
term2 <- (5/2)*x1*x2 + 19*x2^2
term3 <- -(15/2)*x1^3 - (5/2)*x1*x2^2
term4 <- -(11/2)*x2^4 + (x1^3)*(x2^2)
y <- (9 + term1 + term2 + term3 + term4)*11/20
return(y)
}
f2 <- function(x){
5*exp(-((8*x[1]-2)^2 + (8*x[2] - 2)^2))*(8*x[1] - 2)
}
twin_galaxies <- function(x) f1(x) + f2(x)
xx <- seq(0, 1, length.out=51)
zz <- expand.grid(xx, xx)
yy <- matrix(apply(zz, 1, twin_galaxies), nrow=51)
image(yy,
col=colorRampPalette(rev(RColorBrewer::brewer.pal(11, "RdBu")))(100),
xlab="x1", ylab="x2")
X <- lhs::maximinLHS(500, 2)
y <- apply(X, 1, twin_galaxies)
Xtest <- matrix(runif(2*50), ncol=2)
ytest <- apply(Xtest, 1, twin_galaxies)
tic()
mod <- leapGP(X, y, M0=30)
toc()
tic()
pred1 <- rep(NA, 50)
for(i in 1:50){
mod <- predict_leapGP(mod, Xtest[i,], rho=0.95)
pred1[i] <- mod$mean
}
toc()
plot(pred1, ytest, main=paste("RMSE = ", round(sqrt(mean((pred1-ytest)^2)), 4)))
tic()
mod <- leapGP(X, y, M0=30)
toc()
tic()
pred1 <- rep(NA, 50)
for(i in 1:50){
mod <- predict_leapGP(mod, Xtest[i,], rho=0.95)
pred1[i] <- mod$mean
}
toc()
plot(pred1, ytest, main=paste("RMSE = ", round(sqrt(mean((pred1-ytest)^2)), 4)))
abline(0, 1)
tic()
mod <- leapGP(X, y, M0=0)
mod <- leapGP(X, y, M0 = 0)
devtools::document()
library(leapgp)
library(devtools)
?build_vignettes
build_vignettes("leapgp")
build_vignettes("leapgp")
build_vignettes(".")
devtools::document()
library(leapgp)
