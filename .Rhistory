# Generate data
f <- function(x) 1.3356*(1.5*(1-x[1]) + exp(2*x[1] - 1)*sin(3*pi*(x[1] - 0.6)^2) + exp(3*(x[2]-0.5))*sin(4*pi*(x[2] - 0.9)^2))
X <- matrix(runif(200), ncol=2)
y <- apply(X, 1, f)
# Generate data for prediction
Xtest <- matrix(runif(200), ncol=2)
ytest <- apply(Xtest, 1, f)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30)
library(leapgp)
# Generate data
f <- function(x) 1.3356*(1.5*(1-x[1]) + exp(2*x[1] - 1)*sin(3*pi*(x[1] - 0.6)^2) + exp(3*(x[2]-0.5))*sin(4*pi*(x[2] - 0.9)^2))
X <- matrix(runif(2000), ncol=2)
y <- apply(X, 1, f)
# Generate data for prediction
Xtest <- matrix(runif(2000), ncol=2)
ytest <- apply(Xtest, 1, f)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30)
library(leapgp)
# Generate data
f <- function(x) 1.3356*(1.5*(1-x[1]) + exp(2*x[1] - 1)*sin(3*pi*(x[1] - 0.6)^2) + exp(3*(x[2]-0.5))*sin(4*pi*(x[2] - 0.9)^2))
X <- matrix(runif(2000), ncol=2)
y <- apply(X, 1, f)
# Generate data for prediction
Xtest <- matrix(runif(2000), ncol=2)
ytest <- apply(Xtest, 1, f)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0)
pred[i] <- mod$mean
}
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30, start=6)
document()
document()
document()
library(leapgp)
# Generate data
f <- function(x) 1.3356*(1.5*(1-x[1]) + exp(2*x[1] - 1)*sin(3*pi*(x[1] - 0.6)^2) + exp(3*(x[2]-0.5))*sin(4*pi*(x[2] - 0.9)^2))
X <- matrix(runif(2000), ncol=2)
y <- apply(X, 1, f)
# Generate data for prediction
Xtest <- matrix(runif(2000), ncol=2)
ytest <- apply(Xtest, 1, f)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30)
library(leapgp)
# Generate data
f <- function(x) 1.3356*(1.5*(1-x[1]) + exp(2*x[1] - 1)*sin(3*pi*(x[1] - 0.6)^2) + exp(3*(x[2]-0.5))*sin(4*pi*(x[2] - 0.9)^2))
X <- matrix(runif(2000), ncol=2)
y <- apply(X, 1, f)
# Generate data for prediction
Xtest <- matrix(runif(2000), ncol=2)
ytest <- apply(Xtest, 1, f)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30, start=7)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30, start=7)
mod <- leapGP(X, y, M0 = 30, start=7)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30, start=7)
rm(start)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30)
X
# Generate data
f <- function(x) 1.3356*(1.5*(1-x[1]) + exp(2*x[1] - 1)*sin(3*pi*(x[1] - 0.6)^2) + exp(3*(x[2]-0.5))*sin(4*pi*(x[2] - 0.9)^2))
X <- matrix(runif(2000), ncol=2)
y <- apply(X, 1, f)
# Generate data for prediction
Xtest <- matrix(runif(2000), ncol=2)
ytest <- apply(Xtest, 1, f)
M0 = ceiling(sqrt(length(y)))
rho = NA
scale=FALSE
n = ceiling(sqrt(length(y)))
start = NA
verbose = FALSE
justdoit = FALSE
if(M0 == 0){
out <- list(X=X, y=y, hubs=list())
return(out)
}
M0
start
cnt <- 1
#Get parameters
N <- length(y)
if(is.na(n)){
n <- ceiling(sqrt(N))
}
if(n > 300 & !justdoit){
stop('n is very large - consider choosing a smaller value. Set justdoit=TRUE to override.')
}
if(is.na(M0)){
M0 <- ceiling(sqrt(N))
}
if(is.na(start)){
start <- floor(max(6, 0.1*n))
}
start
if(M0 < N){
if(N <= 5000 | justdoit){
#Use PAM to find medoids
coord_ind <- cluster::pam(X, M0, pamonce=5)$id.med
}else{
warning('N is very large, a subset of 5000 points was used for inital hub placement. Set justdoit=TRUE to override.')
rand_ind <- sample(N,5000)
coord_ind <- rand_ind[cluster::pam(X[rand_ind,], M0, pamonce=5)$id.med]
}
}else{
coord_ind <- 1:N
}
#Start building hubs
hubs <- list()
for(hh in 1:M0){
h <- laGP::laGP(Xref=matrix(X[coord_ind[hh], ], ncol=ncol(X)),
X=X, Z=y,
start=start, end=n, ...)
new_hub <- list(coord_id=coord_ind[hh], neigh=h$Xi, kappa=1/h$mle$d,
nugget=1/h$mle$g)
#Calculate psi (called a in code)
K <- diag(rep(1, n))
for(i in 2:n){
for(j in 1:(n-1)){
ii <- new_hub$neigh[i]
jj <- new_hub$neigh[j]
K[i,j] <- K[j, i] <- exp(-new_hub$kappa*sum((X[ii,]-X[jj,])^2))
}
}
Kinv <- solve(K+diag(rep(1e-9, n)))
new_hub$a <- Kinv%*%matrix(y[new_hub$neigh], nrow=n)
if(scale){
new_hub$Kinv <- Kinv
new_hub$phi <- matrix(y[new_hub$neigh], ncol=n)%*%(new_hub$a)
}
hubs[[hh]] <- new_hub
if(verbose){
if((hh %% ((M0 - M0%%10)/10)) == 0){
cat(cnt*10, "%,\t", as.character(Sys.time()), "\n", sep="")
cnt <- cnt + 1
}
}
}
start
document()
library(leapgp)
# Generate data
f <- function(x) 1.3356*(1.5*(1-x[1]) + exp(2*x[1] - 1)*sin(3*pi*(x[1] - 0.6)^2) + exp(3*(x[2]-0.5))*sin(4*pi*(x[2] - 0.9)^2))
X <- matrix(runif(2000), ncol=2)
y <- apply(X, 1, f)
# Generate data for prediction
Xtest <- matrix(runif(2000), ncol=2)
ytest <- apply(Xtest, 1, f)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0)
pred[i] <- mod$mean
}
document()
library(leapgp)
# Generate data
f <- function(x) 1.3356*(1.5*(1-x[1]) + exp(2*x[1] - 1)*sin(3*pi*(x[1] - 0.6)^2) + exp(3*(x[2]-0.5))*sin(4*pi*(x[2] - 0.9)^2))
X <- matrix(runif(2000), ncol=2)
y <- apply(X, 1, f)
# Generate data for prediction
Xtest <- matrix(runif(2000), ncol=2)
ytest <- apply(Xtest, 1, f)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0)
pred[i] <- mod$mean
}
document()
library(leapgp)
# Generate data
f <- function(x) 1.3356*(1.5*(1-x[1]) + exp(2*x[1] - 1)*sin(3*pi*(x[1] - 0.6)^2) + exp(3*(x[2]-0.5))*sin(4*pi*(x[2] - 0.9)^2))
X <- matrix(runif(2000), ncol=2)
y <- apply(X, 1, f)
# Generate data for prediction
Xtest <- matrix(runif(2000), ncol=2)
ytest <- apply(Xtest, 1, f)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0)
pred[i] <- mod$mean
}
names(mod)
mod$mean
document()
library(leapgp)
# Make sequential predictions
pred <- rep(NA, 1000)
# ============================
#    CASE ONE: rho = 0
# ============================
# Train initial model
mod <- leapGP(X, y, M0 = 30)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0)
pred[i] <- mod$mean
}
plot(pred, ytest)
# ============================
#    CASE TWO: M0 = 0
# ============================
# Initalize empty model
mod <- leapGP(X, y, M0 = 0)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0.95)
pred[i] <- mod$mean
}
plot(pred, ytest)
# ============================
#    CASE THREE: Full leapGP
# ============================
# Train leapGP model
mod <- leapGP(X, y, M0 = 30)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0.95)
pred[i] <- mod$mean
}
plot(pred, ytest)
# ============================
#    CASE THREE: Full leapGP
# ============================
# Train leapGP model
mod <- leapGP(X, y, M0 = 30)
# Make sequential predictions
pred <- rep(NA, 1000)
for(i in 1:1000){
mod <- predict_leapGP(mod, matrix(Xtest[i,], nrow=1), rho=0.99)
pred[i] <- mod$mean
}
plot(pred, ytest)
document()
# TEST CHUNK PREDICTION (NOT THE INTENDED USECASE)
mod <- leapGP*(X, y, M0=30)
# TEST CHUNK PREDICTION (NOT THE INTENDED USECASE)
mod <- leapGP(X, y, M0=30)
cor(pred, ytest)
N <- 500
X <- matrix(runif(N * 2), nrow=N, ncol=2)
y <- apply(X, 1, f)
Xtest <- matrix(50 * 2, ncol=2)
ytest <- apply(Xtest, 1, f)
# Train leapGP model
mod <- leapGP(X, y, M0=10)
pred <- rep(NA, 50)
for(i in 1:50){
mod <- predict(mod, Xtest[i,], rho=0.95)
pred[i] <- mod$mean
}
pred <- rep(NA, 50)
for(i in 1:50){
mod <- predict_leapGP(mod, Xtest[i,], rho=0.95)
pred[i] <- mod$mean
}
Xtest <- matrix(50 * 2, ncol=2)
ytest <- apply(Xtest, 1, f)
dim(Xtest)
Xtest <- matrix(runif(50 * 2), ncol=2)
ytest <- apply(Xtest, 1, f)
# Train leapGP model
mod <- leapGP(X, y, M0=10)
pred <- rep(NA, 50)
for(i in 1:50){
mod <- predict_leapGP(mod, Xtest[i,], rho=0.95)
pred[i] <- mod$mean
}
# Test prediction
d1 <- cor(ytest, pred)
d1
# TEST CHUNK PREDICTION (NOT THE INTENDED USECASE)
mod <- leapGP(X, y, M0=30)
f <- function(x) 1.3356*(1.5*(1-x[1]) + exp(2*x[1] - 1)*sin(3*pi*(x[1] - 0.6)^2) + exp(3*(x[2]-0.5))*sin(4*pi*(x[2] - 0.9)^2))
X <- matrix(runif(2000), ncol=2)
y <- apply(X, 1, f)
# Generate data for prediction
Xtest <- matrix(runif(2000), ncol=2)
ytest <- apply(Xtest, 1, f)
mod <- predict_leapGP(mod, Xtest, rho=0.95)
mod$mean
plot(mod$mean, ytestt)
plot(mod$mean, ytest)
# TEST SCALE FEATURE
mod <- leapGP(X, y, M0=30, scale=TRUE)
mod <- predict_leapGP(mod, Xtest, rho=0.95, scale=TRUE)
mod$mean
mod$sd
document()
duqling::twin_galaxies
duqling::lim_polynomial
99/20
18*11/40
duqling::grlee2
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
xx <- seq(0, 1, length.out=51)
expand.grid(xx, xx)
expand.grid(xx, xx)
y <- apply(zz, 1, twin_galaxies)
f1 <- function(x){
x1 <- x[1]
x2 <- x[2]
term1 <- (5/2)*x1 - (35/2)*x2
term2 <- (5/2)*x1*x2 + 19*x2^2
term3 <- -(15/2)*x1^3 - (5/2)*x1*x2^2
term4 <- -(11/2)*x2^4 + (x1^3)*(x2^2)
y <- (9 + term1 + term2 + term3 + term4)*11/20
return(y)
}
f2 <- function(x){
5*exp(-((8*x[1]-2)^2 + (8*x[2] - 2)^2))*(8*x[1] - 2)
}
twin_galaxeis <- function(x) f1(x) + f2(x)
xx <- seq(0, 1, length.out=51)
zz <- expand.grid(xx, xx)
yy <- apply(zz, 1, twin_galaxies)
twin_galaxies <- function(x) f1(x) + f2(x)
xx <- seq(0, 1, length.out=51)
zz <- expand.grid(xx, xx)
yy <- apply(zz, 1, twin_galaxies)
yy
crossprod(xx)
tcrossprod(xx)
yy <- matrix(apply(zz, 1, twin_galaxies), nrow=51)
yy
image(yy)
?image
image(yy, breaks=30)
?RColorBrewer::brewer.pal
?RColorBrewer::brewer.pal(11, "RdBu")
RColorBrewer::brewer.pal(11, "RdBu")
image(yy, breaks=RColorBrewer::brewer.pal(11, "RdBu"))
image(yy, colour=RColorBrewer::brewer.pal(11, "RdBu"))
image(yy, colours=RColorBrewer::brewer.pal(11, "RdBu"))
?image
image(yy, col=RColorBrewer::brewer.pal(11, "RdBu"))
image(yy, col=RColorBrewer::brewer.pal(11, "RdBu"), useRaster=TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RColorBrewer)
f1 <- function(x){
x1 <- x[1]
x2 <- x[2]
term1 <- (5/2)*x1 - (35/2)*x2
term2 <- (5/2)*x1*x2 + 19*x2^2
term3 <- -(15/2)*x1^3 - (5/2)*x1*x2^2
term4 <- -(11/2)*x2^4 + (x1^3)*(x2^2)
y <- (9 + term1 + term2 + term3 + term4)*11/20
return(y)
}
f2 <- function(x){
5*exp(-((8*x[1]-2)^2 + (8*x[2] - 2)^2))*(8*x[1] - 2)
}
twin_galaxies <- function(x) f1(x) + f2(x)
xx <- seq(0, 1, length.out=51)
zz <- expand.grid(xx, xx)
yy <- matrix(apply(zz, 1, twin_galaxies), nrow=51)
image(yy,
col=colorRampPalette(rev(RColorBrewer::brewer.pal(11, "RdBu")))(100))
f1 <- function(x){
x1 <- x[1]
x2 <- x[2]
term1 <- (5/2)*x1 - (35/2)*x2
term2 <- (5/2)*x1*x2 + 19*x2^2
term3 <- -(15/2)*x1^3 - (5/2)*x1*x2^2
term4 <- -(11/2)*x2^4 + (x1^3)*(x2^2)
y <- (9 + term1 + term2 + term3 + term4)*11/20
return(y)
}
f2 <- function(x){
5*exp(-((8*x[1]-2)^2 + (8*x[2] - 2)^2))*(8*x[1] - 2)
}
twin_galaxies <- function(x) f1(x) + f2(x)
xx <- seq(0, 1, length.out=101)
zz <- expand.grid(xx, xx)
yy <- matrix(apply(zz, 1, twin_galaxies), nrow=101)
image(yy,
col=colorRampPalette(rev(RColorBrewer::brewer.pal(11, "RdBu")))(100))
f1 <- function(x){
x1 <- x[1]
x2 <- x[2]
term1 <- (5/2)*x1 - (35/2)*x2
term2 <- (5/2)*x1*x2 + 19*x2^2
term3 <- -(15/2)*x1^3 - (5/2)*x1*x2^2
term4 <- -(11/2)*x2^4 + (x1^3)*(x2^2)
y <- (9 + term1 + term2 + term3 + term4)*11/20
return(y)
}
f2 <- function(x){
5*exp(-((8*x[1]-2)^2 + (8*x[2] - 2)^2))*(8*x[1] - 2)
}
twin_galaxies <- function(x) f1(x) + f2(x)
xx <- seq(0, 1, length.out=51)
zz <- expand.grid(xx, xx)
yy <- matrix(apply(zz, 1, twin_galaxies), nrow=51)
image(yy,
col=colorRampPalette(rev(RColorBrewer::brewer.pal(11, "RdBu")))(100),
useRaster = TRUE)
rm(twin_galaxeis)
?laGP
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(leapgp)
library(RColorBrewer)
library(lhs)
laGP(Xtest[i,], 6, 30, X, y)
library(leapgp)
laGP(Xtest[i,], 6, 30, X, y)
library(laGP)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(leapgp)
library(RColorBrewer)
library(lhs)
library(laGP)
laGP::laGP(Xtest[i,], 6, 30, X, y)
dim(Xtest[1,])
library(tictoc)
for(i in 1:1000){
laGP::laGP(matrix(Xtest[i,], nrow=1), 6, 30, X, y)
}
laGP::laGP(matrix(Xtest[i,], nrow=1), 6, 30, X, y)
X <- lhs::maximinLHS(1000, 2)
y <- apply(X, 1, twin_galaxies)
Xtest <- matrix(runif(2*50), ncol=2)
ytest <- apply(Xtest, 1, twin_galaxies)
library(tictoc)
pred_la[i] <- rep(NA, 50)
library(tictoc)
pred_la <- rep(NA, 50)
for(i in 1:50){
pred_la[i] <- laGP::laGP(matrix(Xtest[i,], nrow=1), 6, 30, X, y)$mean
}
library(leapgp)
version
build_vignettes()
build_vignettes("leapgp")
devtools::build_vignettes()
document()
document()
build_vignettes()
